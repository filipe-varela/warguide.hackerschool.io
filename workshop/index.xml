<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workshops on Guia do Workshop de Android do Recrutamento</title>
    <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/</link>
    <description>Guia do Workshop de Android do Recrutamento (Workshops)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-pt</language>
    <lastBuildDate>Fri, 17 Dec 2021 15:35:30 +0000</lastBuildDate>
    
    <atom:link href="https://filipe-varela.github.io/warguide.hackerschool.io/workshop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exemplo do Backend</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/exemplo_backend/</link>
      <pubDate>Fri, 17 Dec 2021 15:35:30 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/exemplo_backend/</guid>
      <description>&lt;p&gt;Vai-se ao &lt;code&gt;/src/main/res/&lt;/code&gt; da &lt;a href=&#34;../estrutura&#34;&gt;estrutura&lt;/a&gt; do projeto e abre-se o &lt;code&gt;MainActivity.kt&lt;/code&gt;.
Para ajuda, pode-se carregar em &lt;code&gt;Shift&lt;/code&gt; duas vezes rapidamente para aparecer uma palete de comandos. Daí, pode-se escrever &lt;code&gt;MainActivity&lt;/code&gt; e deve aparecer o ficheiro que se pretende como um dos sugeridos.&lt;/p&gt;
&lt;p&gt;Daí, deve-se ter o seguinte:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; androidx.appcompat.app.AppCompatActivity
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; android.os.Bundle

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Daqui, tem-se que o código aqui feito é dentro do &lt;code&gt;onCreate&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;declarar-os-elementos-do-ui&#34;&gt;Declarar os elementos do UI&lt;/h2&gt;
&lt;p&gt;Para chamar os elementos no UI, tem-se de colocar em primeiro lugar um &lt;a href=&#34;../id&#34;&gt;ID&lt;/a&gt; no botão.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/btn_menu&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Click me!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_below=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/txt_menu&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Para depois se poder chamar tanto o texto como o botão do UI no Backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; txtView : TextView = findViewById(R.id.txt_menu)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; btnView : Button = findViewById(R.id.btn_menu)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Se aparecer algum erro, põe o cursos perto do mesmo e faz &lt;code&gt;Alt+Enter&lt;/code&gt;. Deve aparecer algumas sugestões para resolver o mesmo. Em principio, deve ser preciso importar, ou seja, o &lt;code&gt;import&lt;/code&gt;, mas se não for, fala comigo para poder ver do problema ou tenta resolver procurando na internet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt; é como se fosse uma pasta onde se tem todos os recursos estáticos - que são constantes no decorrer da aplicação -, tais como, &lt;code&gt;layout&lt;/code&gt;&amp;rsquo;s, id&amp;rsquo;s ou valores de cores/dimensões/textos. De lá, se quer obter o valor dos id&amp;rsquo;s que se criou previamente&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;alternar-o-texto&#34;&gt;Alternar o texto&lt;/h2&gt;
&lt;p&gt;Agora pretende-se alterar o texto &lt;code&gt;&#39;Hello World!&#39;&lt;/code&gt; por outros dois.
Para tal, vamos usar uma das propriedades do botão e adicionar uma ação quando este é clicado.&lt;/p&gt;
&lt;p&gt;Logo depois da sua declaração:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;btnView.setOnClickListener {
    txtView.text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HackerSchool rocks!&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Agora, se se correr a aplicação, tem-se que o texto muda para &lt;code&gt;&#39;HackerSchool rocks!&#39;&lt;/code&gt; quando o botão é clicado.&lt;/p&gt;
&lt;p&gt;A fim de gerar este efeito de alternar o texto quando se carrega no botão, tem-se que criar uma variável booleana em cima do &lt;code&gt;onCreate&lt;/code&gt; (podendo ser noutro lugar, mas põe-se antes para conveniência e boa prática):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; mudarTexto = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;E mudar a ação do botão para:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;btnView.setOnClickListener {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (mudarTexto) {
        txtView.text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HackerSchool rocks!&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Negar o valor do mudarTexto para 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// gerar o efeito de alternação
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        mudarTexto = mudarTexto.not()
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        txtView.text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You rock!&amp;#34;&lt;/span&gt;
        mudarTexto = mudarTexto.not()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quando se correr a aplicação agora, tem-se que o texto se vai alternando.&lt;/p&gt;
&lt;h2 id=&#34;exemplo-completo&#34;&gt;Exemplo completo&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; androidx.appcompat.app.AppCompatActivity
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; android.os.Bundle

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// Variável para alternar o texto
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; mudarTexto = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        &lt;span style=&#34;color:#75715e&#34;&gt;// Declarar os objetos na UI
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; txtView : TextView = findViewById(R.id.txt_menu)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; btnView : Button = findViewById(R.id.btn_menu)

        &lt;span style=&#34;color:#75715e&#34;&gt;// Quando carregado, alterar o texto para um novo
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// e negar o valor mudarTexto
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        btnView.setOnClickListener {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (mudarTexto) {
                txtView.text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HackerSchool rocks!&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;// Negar o valor do mudarTexto para gerar 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// o efeito de alternação
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                mudarTexto = mudarTexto.not()
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                txtView.text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You rock!&amp;#34;&lt;/span&gt;
                mudarTexto = mudarTexto.not()
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conexao de Backend com Frotend</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/conexao_frotend_backend/</link>
      <pubDate>Fri, 17 Dec 2021 15:35:24 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/conexao_frotend_backend/</guid>
      <description>&lt;p&gt;Para concluir a parte de Backend, a fim de se poder conectar o UI já criado com o Backend da aplicação, deve-se usar o método &lt;code&gt;findViewById&lt;/code&gt;, que vem já importado, se assim se pode dizer, dentro da atividade:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
    setContentView(R.layout.activity_main)

    &lt;span style=&#34;color:#75715e&#34;&gt;// Pode-se chamar o método aqui
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; txtView : TextView = findViewById(R.id.txt_menu)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Null Safety</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/null_safety/</link>
      <pubDate>Fri, 17 Dec 2021 15:35:12 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/null_safety/</guid>
      <description>&lt;p&gt;Um dos maiores problemas que JAVA criou desde da sua criação foi o erro &lt;code&gt;NullPointerException&lt;/code&gt;, um erro gerado quando se tenta efetuar uma operação sobre uma variável nula - &lt;code&gt;null&lt;/code&gt;.
Ora, como a variável é nula, não representa nada na memória, então efetuar qualquer operação sobre a mesma seria o mesmo como efetuar uma operação em nada.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Se se correr este código em JAVA
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;String nula&amp;#39; irá aparecer na consola
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// pois se está a efetuar uma operação
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sob uma variável nula
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;String stringNula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  stringNula&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NullPointerExcetion e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;String nula&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Este erro já custou milhões de euros ou dolares à industria, sendo por isso um dos maiores problemas enquanto se lida com JAVA e um dos problemas que a Google quis evitar aquando se desenvolveu o Kotlin.&lt;/p&gt;
&lt;p&gt;Em Kotlin, as variáveis são por defeito não nulas, isto é, se se tentar atribuir o valor &lt;code&gt;null&lt;/code&gt; a uma das variáveis vistas anteriormente, iria-se ter um erro de sintaxe e o programa não iria compilar.
Sendo assim, para se ter variáveis nulas, tem-se que explicitamente indicar no código, usando o ponto de interrogação - &lt;code&gt;?&lt;/code&gt; - na declaração das variáveis&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Indica que pode ser nulo com “?”
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; stringNula : String? = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; stringNaoNula : String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// stringNula!!.isEmpty()
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;stringNula&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;isEmpty()
stringNaoNula.isEmpty()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Posteriormente, qualquer operação na variável que seja nula tem que ter o sinal &lt;code&gt;?&lt;/code&gt; para poder executar a operação caso não seja nula - consecutivamente, não executará se for nula.
Caso se queira mesmo que seja executada a função na variável nula no momento em que for executado o comando, pode-se utilizar o &lt;code&gt;!!&lt;/code&gt;.
Contudo, com este último pode-se estar sujeito ao erro de &lt;code&gt;NullPointerException&lt;/code&gt;, pois se tentou executar uma operação numa variável nula caso não se tenha cuidado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kotlin Trivia(l)</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/kotlin_trivia/</link>
      <pubDate>Fri, 17 Dec 2021 15:35:03 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/kotlin_trivia/</guid>
      <description>&lt;p&gt;Fora das comparações, eis alguns excertos daquilo que se pode escrever em Kotlin:&lt;/p&gt;
&lt;h3 id=&#34;declaração-de-variáveis&#34;&gt;Declaração de variáveis&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; inteiro : Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; flutuante : Float = &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14f&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; duplo : Double = &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// este é mais preciso que float
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; texto : String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HackerSchool&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; booleano : Boolean = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;constantes&#34;&gt;Constantes&lt;/h4&gt;
&lt;p&gt;Podem ser declaradas variáveis com o termo &lt;code&gt;val&lt;/code&gt; variáveis que só pode ser atribuído uma única vez um valor.
Caso haja uma segunda, haverá erro de compilação.
Contudo, variáveis como esta pode ter propriedades alteradas do mesmo modo que fosse um objeto, a partir de um &lt;code&gt;setter&lt;/code&gt; ou de um &lt;code&gt;getter&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; valorConstante = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Vai dar erro
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;valorConstante = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
valorConstante = valorConstante + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Não vai dar erro
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;valorConstante.inc()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;alguns-modificadores-de-visibilidade&#34;&gt;(Alguns) modificadores de visibilidade&lt;/h4&gt;
&lt;p&gt;Por default, quando declarada uma variável até agora, a mesma seria pública, isto é, poderia ser acedida fora do documento ao qual esta fora declarada.
Por outro lado, é possível declarar variáveis que só podem ser acedidas dentro do mesmo documento, sendo essas &lt;code&gt;private&lt;/code&gt; ou privadas.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// O `public` pode ser omitido
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; publica : Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Default
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; privada : Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;inicialização-tardia&#34;&gt;Inicialização tardia&lt;/h4&gt;
&lt;p&gt;Por vezes pode ser conveniente declarar um objeto, mesmo antes de se poder inicializá-lo, pois não se sabe que condições este será no futuro.
Para tal, usa-se o comando &lt;code&gt;lateinit var&lt;/code&gt; para indicar que queremos inicializar mais tarde este objeto ou variável.
Atenção que não é recomendado usar este comando dentro de um método e, ao mesmo tempo, não é possível para tipos primitivos, como inteiros ou flutuantes.
Para estes, é necessário dar um valor por defeito, &lt;em&gt;default&lt;/em&gt;, para serem declarados e alterados mais tarde (tendo assim de necessitar do parâmetro &lt;em&gt;var&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lateinit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; txtView : TextView
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;listas-e-mapas&#34;&gt;Listas e Mapas&lt;/h2&gt;
&lt;p&gt;Tal como em Python, é possível em Kotlin criar listas e mapas (dicionários do Python).
Contudo, Kotlin tem uma particularidade neste departamento em que as mesmas podem ser &lt;em&gt;mutáveis&lt;/em&gt; ou &lt;em&gt;imutáveis&lt;/em&gt;.
Isto é, uma lista (mapa) podem ter a propriedade de mudar de tamanho, acrescentar ou remover elementos, se forem mutáveis.
Caso contrário, se não poderem alterar o seu tamanho, então são imutáveis.
Esta nomenclatura ajuda em lidar com melhor armazenamento de memória, pois só se aloca um espaço certo na memória, e com dados guardados em bases de dados ou armazenamento do sistema.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lMutavel : MutableList&amp;lt;Int&amp;gt; = mutableListOf() 
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lImutavel : List&amp;lt;Int&amp;gt; = listOf()
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mMutavel : MutableMap&amp;lt;String, Int&amp;gt; = mutableMapOf() 
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mImutavel : Map&amp;lt;Int, Int&amp;gt; = mapOf() 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;funções-lambda&#34;&gt;Funções Lambda&lt;/h3&gt;
&lt;p&gt;Kotlin também pode conter funções lambda - funções anónimas e criadas/declaradas no momento.
A estrutura das mesmas pode ser representada da seguinte maneira:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;lMutavel.forEach {
    &lt;span style=&#34;color:#75715e&#34;&gt;// Incrementa cada elemento
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;it&lt;/span&gt;.inc()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A variável &lt;code&gt;it&lt;/code&gt; é uma variável gerada automaticamente dentro do &lt;code&gt;forEach&lt;/code&gt; para representar o elemento em questão da operação - neste caso os inteiros dentro da lista &lt;code&gt;lMutavel&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python &amp; Kotlin</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/python_kotlin/</link>
      <pubDate>Fri, 17 Dec 2021 15:34:52 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/python_kotlin/</guid>
      <description>&lt;p&gt;Tanto como o Python como Kotlin têm bastante parecenças entre si, podendo ser necessário acrescentar um indicador ou chavetas para delimitar os blocos de código.
De seguida, mostra-se alguns exemplos de código que, quando executados, irão produzir o mesmo resultado em ambos os casos:&lt;/p&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Declaração de variáveis&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Declaração de funções/métodos&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;soma&lt;/span&gt; (val1, val2):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; val2
&lt;span style=&#34;color:#75715e&#34;&gt;# Mostrar o resultado&lt;/span&gt;
print(soma(a,b)) &lt;span style=&#34;color:#75715e&#34;&gt;# a+b=3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Declaração de variáveis
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; a : Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// É opcional indicar o seu tipo
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; b = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Declaração de funções/métodos
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;soma&lt;/span&gt; (val1:Int, val2:Int) : Int {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val1 + val2
}

println(soma(a,b)) &lt;span style=&#34;color:#75715e&#34;&gt;// a+b=3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;para-fors-e-ifs&#34;&gt;Para &lt;code&gt;for&lt;/code&gt;&amp;rsquo;s e &lt;code&gt;if&lt;/code&gt;&amp;rsquo;s&lt;/h3&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for’s&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
    print(i)

&lt;span style=&#34;color:#75715e&#34;&gt;# if’s&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (condition):
    &lt;span style=&#34;color:#75715e&#34;&gt;# verdadeiro&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# falso&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// for’s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) {
    println(i)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// if’s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (condition) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// verdadeiro
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// falso
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;mapeamento-de-várias-condições&#34;&gt;Mapeamento de várias condições&lt;/h3&gt;
&lt;p&gt;Python prévio à versão &lt;a href=&#34;https://docs.python.org/3/whatsnew/3.10.html&#34;&gt;3.10&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;valor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (valor&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Zero&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (valor&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    valor &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (valor&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
    do_something()
&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Outra qualquer&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pyhton 3.10 (os highlights pelos vistos ainda não funcionam pois esta versão é bastante recente)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;valor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

match valor:
    case &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Zero&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        valor &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    case &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        do_something()
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
    case _:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Outra qualquer&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// when’s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; valor = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt;(valor) {
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Zero&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; valor.inc()
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Se o statement for mais que uma linha de código, 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// usar esta nomenclatura
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        doSomething() 
    }
&lt;span style=&#34;color:#75715e&#34;&gt;// ... 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Outra qualquer&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JAVA VS Kotlin</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/java_kotlin/</link>
      <pubDate>Fri, 17 Dec 2021 15:34:47 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/java_kotlin/</guid>
      <description>&lt;h2 id=&#34;java&#34;&gt;JAVA&lt;/h2&gt;
&lt;p&gt;Por muito tempo, &lt;a href=&#34;https://developer.android.com/codelabs/build-your-first-android-app#0&#34;&gt;JAVA&lt;/a&gt; foi a linguagem de programação para Android.
Sendo uma linguagem de programação orientada por objetos &lt;em&gt;antiga&lt;/em&gt;, é precisamente uma linguagem potente, próxima da linguagem máquina e, ao mesmo tempo, tem um grande suporte na internet.
Para quem quiser experimentar em mexer em JAVA, recomendo JAVA 1.8, dado por ter imensas ferramentas semelhantes às linguagens de programação atuais e novas.&lt;/p&gt;
&lt;h2 id=&#34;kotlin&#34;&gt;Kotlin&lt;/h2&gt;
&lt;p&gt;Por outro lado, dado por não haver uma linguagem de programação dedicada e adaptada ao Android, a Google decidiu em desenvolver uma linguagem baseada em JAVA que conseguisse prevenir/cobrir os problemas existentes com esta última - &lt;a href=&#34;https://kotlinlang.org/docs/android-overview.html&#34;&gt;Kotlin&lt;/a&gt;.
Kotlin é, tal como o JAVA, uma linguagem orientada por objetos e contem bastante semelhanças com linguagens recentes como Python ou Javascript, tornando-se uma linguagem ideal para iniciantes poderem programar.
Não só isso, mas como partilha o mesmo encoder e, consecutivamente, a &lt;em&gt;&lt;a href=&#34;https://pt.wikipedia.org/wiki/M%C3%A1quina_virtual_Java&#34;&gt;JAVA Virtual Machine (JVM)&lt;/a&gt;&lt;/em&gt;, Kotlin e JAVA podem coexistir no mesmo projeto sem haver perdas de performance e/ou de incompatibilidades.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/jvm.png&#34; alt=&#34;JVM&#34;&gt;&lt;/p&gt;
&lt;p&gt;Para este workshop, foi usado o Kotlin pela sua simplicidade e por agora ser a linguagem oficial, ditada pela Google, no desenvolvimento de aplicações Android.
Para além disso, o documento que se irá alterar, inicialmente, será o &lt;code&gt;MainActivity.kt&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exemplo do Frotend</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/exemplo_frotend/</link>
      <pubDate>Fri, 17 Dec 2021 15:32:02 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/exemplo_frotend/</guid>
      <description>&lt;p&gt;O exemplo começa em alterar o ficheiro &lt;code&gt;activity_main.xml&lt;/code&gt; em &lt;code&gt;/src/main/res/layout&lt;/code&gt; e poderá ser provavelmente um dos separadores dentro do Android Studio já aberto.
Tem-se como objetivo para este exemplo ter um botão que altere o texto de forma alternada.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintLeft_toLeftOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintRight_toRightOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O primeiro paço aqui seria adaptar o &lt;code&gt;ConstraintLayout&lt;/code&gt; para um &lt;em&gt;layout&lt;/em&gt; que nos permita posicionar melhor os elementos com poucas linhas de código.
Para tal, iremos utilizar o &lt;code&gt;RelativeLayout&lt;/code&gt;, adaptando posteriormente o &lt;code&gt;TextView&lt;/code&gt; para manter o mesmo aspeto anterior a esta alteração (que foi trocar o nome do ViewGroup e retirar as linhas que continham o package da &lt;code&gt;app&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;RelativeLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_centerInParent=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../images/exemplo_frotend_1.png&#34; alt=&#34;Exemplo 1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Um aspeto interessante é de que as propriedades usadas são diretas na interpretação, sendo que a linha adicionada no texto ser &lt;code&gt;layout_centerInParent&lt;/code&gt; indica que o elemento vai ser centrado no centro do elemento parente.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Define-se como elemento parente ou &lt;em&gt;parent&lt;/em&gt; o elemento que está um nível acima na hierarquia. Por vezes, pode-se ter como o parente o ecrã do telemóvel se o &lt;em&gt;ViewGroup&lt;/em&gt; for o elemento mais exterior que consigamos alterar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Por fim, pretende-se adicionar um botão, bastando adicionar as respetivas linhas já vistas anteriormente no ficheiro:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Click me!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Contudo, este aparecerá no canto superior esquerdo do ecrã.
este é a posição &lt;em&gt;default&lt;/em&gt; do android aquando não estiver definida um posicionamento para o mesmo.
Para evitar isto, vamos utilizar o conceito de ID já falado e utilizar uma das propriedades provenientes do &lt;code&gt;RelativeLayout&lt;/code&gt;, &lt;code&gt;android:layout_below=&amp;quot;id&lt;/code&gt;: Coloca o &lt;em&gt;View&lt;/em&gt; em questão debaixo de outro a partir do ID deste último - &lt;a href=&#34;https://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams#attr_android:layout_below&#34;&gt;doc&lt;/a&gt;.
Neste caso, iremos colocar esta linha no botão e necessitar de referenciar o texto que está centrado no ecrã:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Relative Layout --&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/txt_menu&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_centerInParent=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Click me!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_below=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/txt_menu&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Relative Layout --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../images/exemplo_frotend_2.png&#34; alt=&#34;Exemplo 2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sendo que se acrescentou a linha &lt;code&gt;layout_centerHorizontal&lt;/code&gt; para o botão ficasse centrado horizontalmente com o seu parente.&lt;/p&gt;
&lt;p&gt;Está-se por concluído, por enquanto o frotend desta secção.&lt;/p&gt;
&lt;h2 id=&#34;exemplo-completo&#34;&gt;Exemplo completo&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;RelativeLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/txt_menu&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_centerInParent=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Click me!&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_below=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/txt_menu&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Identificadores - ID&#39;s</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/id/</link>
      <pubDate>Fri, 17 Dec 2021 15:31:34 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/id/</guid>
      <description>&lt;p&gt;De uma forma de conseguir referenciar vários elementos dentro do &lt;em&gt;layout&lt;/em&gt; é através de identificadores.
Os mesmos podem ser adicionados da seguinte maneira e utilizando o exemplo do &lt;em&gt;TextView&lt;/em&gt; da página anterior:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/txt_view&amp;#34;&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;E este conceito será usado no &lt;a href=&#34;../exemplo_frotend&#34;&gt;exemplo&lt;/a&gt; prático seguinte&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>View e ViewGroup</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/view_viewgroup/</link>
      <pubDate>Fri, 17 Dec 2021 15:31:29 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/view_viewgroup/</guid>
      <description>&lt;p&gt;Exemplos de &lt;a href=&#34;https://developer.android.com/reference/android/view/View&#34;&gt;&lt;em&gt;View&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Textview&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextView&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../images/txtview.png&#34; alt=&#34;TextView&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Button&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Click me!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../images/btnview.png&#34; alt=&#34;Button&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Como os &lt;a href=&#34;https://developer.android.com/reference/android/view/ViewGroup&#34;&gt;&lt;em&gt;ViewGroup&lt;/em&gt;&lt;/a&gt;&amp;rsquo;s são mais fáceis de testar na prática com vários elementos, fica aqui um possível arranjo dos mesmos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ConstraintLayout (abreviado no nome e normalmente default)     --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Este layout é usado de uma forma mais visual e ajuda a colocar --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- constraints ou relações/guias entre elementos e parente        --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ConstraintLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/ConstraintLayout&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- RelativeLayout                                                 --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Este layout serve para posicionar elementos relativos a um     --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- outro ou com o parente                                         --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;RelativeLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- LinearLayout                                                   --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Este layout organiza os vários elementos internos em colunas,  --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- com orientation colocada para horizontal, ou em linhas, com a  --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- orientation colocada para vertical                             --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;LinearLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:orientation=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vertical&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- GridLayout --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Como o nome indica, este ViewGroup posiciona os seus elementos --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- sob uma grelha, onde rowCount e columnCount têm que ser forne- --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- cidos para poder funcionar                                     --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;GridLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:rowCount=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:columnCount=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/GridLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>XML</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/xml/</link>
      <pubDate>Fri, 17 Dec 2021 15:31:18 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/xml/</guid>
      <description>&lt;p&gt;A linguagem de frotend usada pelo Android Studio é denominada como &lt;em&gt;Extensible Markup Language&lt;/em&gt; ou &lt;em&gt;XML&lt;/em&gt;!
Esta linguagem é bastante semelhante a uma junção de HTML com CSS, de certa maneira, onde se tem o conceito de tag&amp;rsquo;s, hierarquia e propriedades.
Para além disso, esta linguagem pode ser usada para armazenar informação, montar esquemas ou &lt;em&gt;layouts&lt;/em&gt; e muito mais!&lt;/p&gt;
&lt;h2 id=&#34;formato&#34;&gt;Formato&lt;/h2&gt;
&lt;p&gt;Em termos de formato dentro do Android Studio e em termos de &lt;em&gt;layout&lt;/em&gt;, um elemento simples é representado da seguinte maneira:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;tag&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;package:propriedade=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;valor&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A fim de facilitar a conexão entre nomenclatura do XML e de Android Studio, elementos com esta estrutura são denominados, no &lt;em&gt;layout&lt;/em&gt; mais uma vez, como &lt;em&gt;View&lt;/em&gt;.
Por outro lado, se se quiser ter uma hierarquia no ficheiro de XML, tem-se o seguinte:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grouptag&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;package:propriedade=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;“valor“&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;tag&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;package:propriedade=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;“valor“&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;tag&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grouptag&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Denominando o elemento &lt;code&gt;grouptag&lt;/code&gt; neste caso como &lt;code&gt;ViewGroup&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;
&lt;p&gt;A fim de apresentar mais o conceito que dedicar tempo à sua explicação, quando se quis dizer &lt;code&gt;propriedade&lt;/code&gt; dentro de cada &lt;code&gt;tag&lt;/code&gt; e &lt;code&gt;grouptag&lt;/code&gt;, estava-se a referir aos seguintes módulos que devem estar garantidamente dentro do ficheiro XML caso uma das suas propriedades seja usada:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!- Package Android: exemplo --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grouptag&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;tag&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math_parent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grouptag&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!- Package App: exemplo --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grouptag&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;tag&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grouptag&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sendo o que muda em ambos casos é o que se esteja a importar, com &lt;code&gt;xmlns:package=&amp;quot;url&amp;quot;&lt;/code&gt;, e o respetivo nome do package.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Estrutura do Android Studio</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/estrutura/</link>
      <pubDate>Fri, 17 Dec 2021 15:30:53 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/estrutura/</guid>
      <description>&lt;p&gt;Para se poder mexer no programa e desenvolver assim a aplicação, tem-se de criar um novo projeto em &lt;code&gt;File -&amp;gt; New -&amp;gt; New project&lt;/code&gt; e escolher &lt;code&gt;Empty Activity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/new_project.png&#34; alt=&#34;New Project&#34;&gt;&lt;/p&gt;
&lt;p&gt;Depois é preciso escolher um nome para o projeto, isso será arbitrário, escolher a linguagem Kotlin e &lt;code&gt;Minimum SDK&lt;/code&gt; para 27, mas poderá ser um nível inferior se for necessário (mas ter atenção na escolha!).
Para este workshop, o nível de API 27 será mais que suficiente.&lt;/p&gt;
&lt;h2 id=&#34;estrutura-do-projeto-internamente&#34;&gt;Estrutura do projeto internamente&lt;/h2&gt;
&lt;p&gt;O projeto é estruturado da seguinte maneira:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/estrutura.png&#34; alt=&#34;Estrutura do projeto&#34;&gt;&lt;/p&gt;
&lt;p&gt;Onde:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Os ficheiros de backend se encontram em &lt;code&gt;MyApp/app/src/main/java/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Os ficheiros de frotend se encontram em &lt;code&gt;MyApp/app/src/main/res/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Os ficheiros usados para &lt;em&gt;build&lt;/em&gt; da aplicação são os ficheiros com terminação de &lt;code&gt;*.gradle&lt;/code&gt;, onde iremos utilizar para implementar componentes externos ao Android Studio.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Workshop de Android</title>
      <link>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/intro/</link>
      <pubDate>Fri, 17 Dec 2021 14:55:23 +0000</pubDate>
      
      <guid>https://filipe-varela.github.io/warguide.hackerschool.io/workshop/intro/</guid>
      <description>&lt;p&gt;Este é a versão escrita do workshop de AppDev feita no dia 16/12/2021. 
Nesta página é possível verificar as diferentes partes do mesmo em formato escrito e com &lt;em&gt;snippets&lt;/em&gt; de código.
Entretanto, qualquer material pode ser visto &lt;a href=&#34;https://drive.google.com/drive/folders/1CCDfb7o79b6eR-xim18rZ4XgxLRkmvN8?usp=sharing&#34;&gt;aqui&lt;/a&gt;, bem como não esquecer que têm até dia 6 de janeiro de 2022 para entregar!&lt;/p&gt;
&lt;h2 id=&#34;tópicos-do-workshop&#34;&gt;Tópicos do workshop&lt;/h2&gt;
&lt;p&gt;O workshop foi estruturado da seguinte forma:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Android Studio
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;../estrutura&#34;&gt;Estrutura do Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Frotend
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;../xml&#34;&gt;XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../view_viewgroup&#34;&gt;View vs ViewGroup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../id&#34;&gt;ID&amp;rsquo;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../exemplo_frotend&#34;&gt;Exemplo prático&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Backend
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;../java_kotlin&#34;&gt;Java VS Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../python_kotlin&#34;&gt;Python &amp;amp; Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../kotlin_trivia&#34;&gt;Kotlin Trivia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../null_safety&#34;&gt;Null Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../conexao_frotend_backend&#34;&gt;Conexão de Backend com Frotend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../exemplo_backend&#34;&gt;Exemplo prático&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Mentalidade de AppDev
&lt;ol&gt;
&lt;li&gt;Conceitos vários
&lt;ol&gt;
&lt;li&gt;Activity vs Fragment&lt;/li&gt;
&lt;li&gt;Intent&lt;/li&gt;
&lt;li&gt;SharedPreferences&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;li&gt;Box-Model&lt;/li&gt;
&lt;li&gt;Utils&lt;/li&gt;
&lt;li&gt;Exemplo prático final&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Boas práticas&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../general/enunciado&#34;&gt;Enunciado&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
